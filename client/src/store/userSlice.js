import { createSlice } from '@reduxjs/toolkit';
// import model from '../models/uxpServerModel.js';
// import { createAsyncThunk } from '@reduxjs/toolkit';

/* - - - - - - - - - - THUNKS - - - - - - - - - - -
A "thunk" is an async function, often used as fetchers. 
Thunks are the only place Redux accepts async logic.
We will use thunks to fetch data and dispatch actions. 
If we use createAsyncThunk, then the error and status 
handling is autogenerated, see "extraReducers".
*/
// export const fetchResources = createAsyncThunk('resources/fetchAll', async () => {
//   const data = await model.getAllResources();
//   return data;
// });

/* - - - - - - - - - - - REDUCERS - - - - - - - - - - 
A "reducer" is a function that calculates the new state based 
on the dispatched action.
Since we pass these into createSlice below, we can use mutable 
logic, which looks a lot simpler. 
The extraReducers handle auto generated actions from async thunks.
*/
const reducers = {
  viewLandAck(state) {
    state.showLandAck = false
  },
  logIn(state, action) {
    state.loggedIn = true
  },
  logOut(state, action) {
    state.loggedIn = false
  }
}
const extraReducers = {

}

/* - - - - - - - - - - SELECTORS - - - - - - - - - 
A "selector" is a function that selects certain values 
from the state. We can define them in the React comp,
but here is better for complex selectors. 
*/
export const getShowLandAck = state => state.user.showLandAck;
export const getLoggedIn = state => state.user.loggedIn;

/* - - - - - - - - - SLICES - - - - - - - - - -  
A "slice" is a portion of the state, including all modifiers, 
pertaining to one React component.
First we initialize the slice. 
*/
const initialState = {
  showLandAck: true, // show land ack modal on first home page visit in a session
  loggedIn: false
};

// Using createSlice will wrap mutable logic into safer immutable 
// logic and autogenerate actions etc. for the slice.
export const userSlice = createSlice({
  name: 'user',
  initialState, 
  reducers,
  extraReducers
});


/* - - - - - - - - - - ACTIONS - - - - - - - - - - -
An "action" is just a plain JS object that describes the action, 
with a "type" and "payload".
All it does is tell Redux which reducer to run on which slice.
Example: {type: "resources/updateList", payload: [] } 
Note: Creating a thunk creates a related action.
*/
export const { viewLandAck, logIn, logOut } = userSlice.actions;

// Default export the reducers
export default userSlice.reducer;